{
  "title": "REST API V2",
  "version": "2.1.0-dev.6",
  "description": "A generic connector for accessing HTTP and REST APIs .",
  "authClientTypes": [
    "oauth2",
    "basic",
    "api_key",
    "noauth"
  ],
  "docsUrl": "https://github.com/elasticio/rest-api-component",
  "credentials": {
    "fields": {
      "auth": {
        "required": false,
        "viewClass": "HTTPAuthView"
      }
    }
  },
  "triggers": {
    "httpRequestAxiosTrigger": {
      "main": "./src/actions/httpRequest.js",
      "title": "HTTP request (axios lib)",
      "help": {
        "description": "Will send a GET/POST/PUT/DELETE HTTP request and parse the response back to the flow",
        "link": "/components/rest-api/index.html#http-request-axios"
      },
      "metadata": {
        "out": "./lib/schemas/requestSchema.out.json"
      },
      "fields": {
        "reader": {
          "label": "REST API",
          "required": true,
          "viewClass": "RESTAPIView",
          "order": 95
        },
        "errorPolicy": {
          "label": "Error handling policy",
          "viewClass": "SelectView",
          "placeholder": "Retry by component",
          "model": {
            "byComponent": "Retry by component",
            "rebound": "Use rebound functionality",
            "throwError": "Don't retry (throw error)",
            "emit": "Emit error as message (don't throw errors)"
          },
          "help": {
            "description": "Default - <b>Retry by component</b>"
          },
          "order": 90
        },
        "maxRetries": {
          "label": "Maximum retries",
          "placeholder": "10",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Set maximum retries attempts. This option works only when <b>Error handling policy</b> set as <b><i>Retry by component</i></b>. Default and maximum value - 10"
          },
          "order": 85
        },
        "errorCodes": {
          "label": "Error codes",
          "placeholder": "408, 423, 429, 500-599",
          "viewClass": "TextFieldView",
          "help": {
            "description": "A comma-separated list of codes or ranges. By default, the error handling policy is applied when you receive HTTP codes 408, 423, 429, and any codes greater than 500. However, you can override these codes using this field.<br><br>You can put here exactly codes:<br><b>401, 404, 503</b><br><br>Or you can use ranges:<br><b>400-401, 405-410, 502-509</b><br><br>Or combination of them:<br><b>403, 404, 500-599</b><br><br><br>Note: You can use only codes above 299 here, also not equal 401 if selected OAuth2 authentication"
          },
          "order": 80
        },
        "downloadAsAttachment": {
          "label": "Download as attachment",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "If checked, component will download response data to internal storage as attachment"
          },
          "order": 75
        },
        "uploadFile": {
          "label": "Upload file",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "If checked, you will be able to upload data. There are two options available: <br><br>1. Body content type <b>application/octet-stream</b> - in this case put your url to the file from internal or external storage directly to the \"Body\" field as a string<br><br>2. Body content type <b>multipart/form-data</b> - to use it, put an any key as a string, for example - \"file\" and value as an object (switch this field to \"JSONata Mode\"), where one of the object keys should be \"url\" with a link to the file.<br>Available parameters is this case:<br><b>* url</b> (string, required) - link to the file from internal or external storage<br><b>* filename</b> (string, optional) - name of the file<br><b>* knownLength</b> (number, optional) - size of the file.<br>Example of ready object:<div style=\"background-color:#E7E8EB;\">{<div style=\"margin-left:1em;\"><span style=\"color:#1d75b3;\">\"url\":</span> <span style=\"color:#b35e14;\">\"https://example.com/pic.jpg\"</span>,<br><span style=\"color:#1d75b3;\">\"filename\":</span> <span style=\"color:#b35e14;\">\"pic.jpg\"</span>,<br><span style=\"color:#1d75b3;\">\"knownLength\":</span> <span style=\"color:#75438a;\">15201</span></div>}</div>"
          },
          "order": 70
        },
        "noStrictSSL": {
          "label": "Do not verify SSL certificate (unsafe)",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "Unsafe option! Check it if you want to disable SSL certificate verification on the server"
          },
          "order": 65
        },
        "maxRedirects": {
          "label": "Maximum redirects",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Defines the maximum number of redirects to follow. If set to 0, no redirects will be followed"
          },
          "order": 60
        },
        "delay": {
          "label": "Delay in ms",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Delay calling the next request after the previous request. Max delay 1140000 (19min), default 0"
          },
          "order": 55
        },
        "requestTimeoutPeriod": {
          "label": "Request timeout",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Timeout period in milliseconds while component waiting for server response, should be positive integer (1-1140000), defaults to 100000 (100 sec)"
          },
          "order": 50
        },
        "maxContentLength": {
          "label": "Response size limit",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Maximum response size in bytes, maximum and default 20MB - for regular requests and 100MB - for attachments (if checked <b>Download as attachment</b>)"
          },
          "order": 45
        },
        "maxBodyLength": {
          "label": "Request size limit",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Maximum size of the http request content in bytes, unlimited by default"
          },
          "order": 40
        },
        "responseEncoding": {
          "label": "Response encoding",
          "viewClass": "TextFieldView",
          "placeholder": "utf8",
          "help": {
            "description": "Indicates encoding to use for decoding responses, by default <b>utf8</b> used, but in some cases, when you need to get data inside message you can use <b>base64</b> here"
          },
          "order": 35
        }
      }
    },
    "httpRequestTrigger": {
      "deprecated": true,
      "main": "./lib/triggers/httpRequestTrigger.js",
      "title": "HTTP request (request lib)",
      "help": {
        "description": "Will send a GET/POST/PUT/DELETE HTTP request and parse the response back to the flow",
        "link": "/components/rest-api/index.html#http-request"
      },
      "type": "polling",
      "metadata": {
        "out": "./lib/schemas/requestSchema.out.json"
      },
      "fields": {
        "reader": {
          "label": "REST API",
          "required": true,
          "viewClass": "RESTAPIView"
        },
        "dontThrowErrorFlg": {
          "label": "Don`t throw Error on Failed Calls",
          "viewClass": "CheckBoxView"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        },
        "enableRebound": {
          "label": "Retry on failure",
          "viewClass": "CheckBoxView"
        },
        "noStrictSSL": {
          "label": "Do not verify SSL certificate (unsafe)",
          "viewClass": "CheckBoxView"
        },
        "followRedirect": {
          "label": "Follow redirect mode",
          "viewClass": "SelectView",
          "model": {
            "followRedirects": "Follow redirects",
            "doNotFollowRedirects": "Do not follow redirects"
          },
          "prompt": "Follow redirects (default)"
        },
        "delay": {
          "label": "Delay",
          "viewClass": "TextFieldView",
          "note": "Delay calling the next request after the previous request. Time for the delay is calculated as `Delay`/ `Call Count` and shouldn't be more than 1140 seconds (19 minutes due to platform limitation). The `Call Count` value by default is 1. If you want to use another value, please set the `Call Count` field. "
        },
        "callCount": {
          "label": "Call Count",
          "viewClass": "TextFieldView",
          "note": "Value should be set only in pair with `Delay`, defaults to 1"
        },
        "requestTimeoutPeriod": {
          "label": "Request timeout",
          "viewClass": "TextFieldView",
          "note": "Timeout period in milliseconds while component waiting for server response, should be positive integer (1-1140000), defaults to 100000 (100 sec)"
        }
      }
    }
  },
  "actions": {
    "httpRequestAction": {
      "deprecated": true,
      "main": "./lib/actions/httpRequestAction.js",
      "title": "HTTP request (request lib)",
      "help": {
        "description": "Will send a GET/POST/PUT/DELETE HTTP request and parse the response back to the flow",
        "link": "/components/rest-api/index.html#http-request-1"
      },
      "metadata": {
        "out": "./lib/schemas/requestSchema.out.json"
      },
      "fields": {
        "reader": {
          "label": "REST API",
          "required": true,
          "viewClass": "RESTAPIView"
        },
        "dontThrowErrorFlg": {
          "label": "Don`t throw Error on Failed Calls",
          "viewClass": "CheckBoxView"
        },
        "splitResult": {
          "label": "Split Result if it is an Array",
          "viewClass": "CheckBoxView",
          "note": "After making the request, and applying the above JSONata expression, if the result is an array and this box is checked, we will emit one message for each element of the array."
        },
        "enableRebound": {
          "label": "Retry on failure",
          "viewClass": "CheckBoxView"
        },
        "noStrictSSL": {
          "label": "Do not verify SSL certificate (unsafe)",
          "viewClass": "CheckBoxView",
          "note": "Unsafe option! Check it if you want to disable SSL certificate verification on the server"
        },
        "followRedirect": {
          "label": "Follow redirect mode",
          "viewClass": "SelectView",
          "model": {
            "followRedirects": "Follow redirects",
            "doNotFollowRedirects": "Do not follow redirects"
          },
          "prompt": "Follow redirects (default)"
        },
        "delay": {
          "label": "Delay",
          "viewClass": "TextFieldView",
          "note": "Delay calling the next request after the previous request. Time for the delay is calculated as `Delay`/ `Call Count` and shouldn't be more than 1140 seconds (19 minutes due to platform limitation). The `Call Count` value by default is 1. If you want to use another value, please set the `Call Count` field. "
        },
        "callCount": {
          "label": "Call Count",
          "viewClass": "TextFieldView",
          "note": "Value should be set only in pair with `Delay`, defaults to 1"
        },
        "requestTimeoutPeriod": {
          "label": "Request timeout",
          "viewClass": "TextFieldView",
          "note": "Timeout period in milliseconds while component waiting for server response, should be positive integer (1-1140000), defaults to 100000 (100 sec)"
        }
      }
    },
    "httpRequestAxios": {
      "main": "./src/actions/httpRequest.js",
      "title": "HTTP request (axios lib)",
      "help": {
        "description": "Will send a GET/POST/PUT/DELETE HTTP request and parse the response back to the flow",
        "link": "/components/rest-api/index.html#http-request-axios"
      },
      "metadata": {
        "out": "./lib/schemas/requestSchema.out.json"
      },
      "fields": {
        "reader": {
          "label": "REST API",
          "required": true,
          "viewClass": "RESTAPIView",
          "order": 95
        },
        "errorPolicy": {
          "label": "Error handling policy",
          "viewClass": "SelectView",
          "placeholder": "Retry by component",
          "model": {
            "byComponent": "Retry by component",
            "rebound": "Use rebound functionality",
            "throwError": "Don't retry (throw error)",
            "emit": "Emit error as message (don't throw errors)"
          },
          "help": {
            "description": "Default - <b>Retry by component</b>"
          },
          "order": 90
        },
        "maxRetries": {
          "label": "Maximum retries",
          "placeholder": "10",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Set maximum retries attempts. This option works only when <b>Error handling policy</b> set as <b><i>Retry by component</i></b>. Default and maximum value - 10"
          },
          "order": 85
        },
        "errorCodes": {
          "label": "Error codes",
          "placeholder": "408, 423, 429, 500-599",
          "viewClass": "TextFieldView",
          "help": {
            "description": "A comma-separated list of codes or ranges. By default, the error handling policy is applied when you receive HTTP codes 408, 423, 429, and any codes greater than 500. However, you can override these codes using this field.<br><br>You can put here exactly codes:<br><b>401, 404, 503</b><br><br>Or you can use ranges:<br><b>400-401, 405-410, 502-509</b><br><br>Or combination of them:<br><b>403, 404, 500-599</b><br><br><br>Note: You can use only codes above 299 here, also not equal 401 if selected OAuth2 authentication"
          },
          "order": 80
        },
        "downloadAsAttachment": {
          "label": "Download as attachment",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "If checked, component will download response data to internal storage as attachment"
          },
          "order": 75
        },
        "uploadFile": {
          "label": "Upload file",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "If checked, you will be able to upload data. There are two options available: <br><br>1. Body content type <b>application/octet-stream</b> - in this case put your url to the file from internal or external storage directly to the \"Body\" field as a string<br><br>2. Body content type <b>multipart/form-data</b> - to use it, put an any key as a string, for example - \"file\" and value as an object (switch this field to \"JSONata Mode\"), where one of the object keys should be \"url\" with a link to the file.<br>Available parameters is this case:<br><b>* url</b> (string, required) - link to the file from internal or external storage<br><b>* filename</b> (string, optional) - name of the file<br><b>* knownLength</b> (number, optional) - size of the file.<br>Example of ready object:<div style=\"background-color:#E7E8EB;\">{<div style=\"margin-left:1em;\"><span style=\"color:#1d75b3;\">\"url\":</span> <span style=\"color:#b35e14;\">\"https://example.com/pic.jpg\"</span>,<br><span style=\"color:#1d75b3;\">\"filename\":</span> <span style=\"color:#b35e14;\">\"pic.jpg\"</span>,<br><span style=\"color:#1d75b3;\">\"knownLength\":</span> <span style=\"color:#75438a;\">15201</span></div>}</div>"
          },
          "order": 70
        },
        "noStrictSSL": {
          "label": "Do not verify SSL certificate (unsafe)",
          "viewClass": "CheckBoxView",
          "help": {
            "description": "Unsafe option! Check it if you want to disable SSL certificate verification on the server"
          },
          "order": 65
        },
        "maxRedirects": {
          "label": "Maximum redirects",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Defines the maximum number of redirects to follow. If set to 0, no redirects will be followed"
          },
          "order": 60
        },
        "delay": {
          "label": "Delay in ms",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Delay calling the next request after the previous request. Max delay 1140000 (19min), default 0"
          },
          "order": 55
        },
        "requestTimeoutPeriod": {
          "label": "Request timeout",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Timeout period in milliseconds while component waiting for server response, should be positive integer (1-1140000), defaults to 100000 (100 sec)"
          },
          "order": 50
        },
        "maxContentLength": {
          "label": "Response size limit",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Maximum response size in bytes, maximum and default 20MB - for regular requests and 100MB - for attachments (if checked <b>Download as attachment</b>)"
          },
          "order": 45
        },
        "maxBodyLength": {
          "label": "Request size limit",
          "viewClass": "TextFieldView",
          "help": {
            "description": "Maximum size of the http request content in bytes, unlimited by default"
          },
          "order": 40
        },
        "responseEncoding": {
          "label": "Response encoding",
          "viewClass": "TextFieldView",
          "placeholder": "utf8",
          "help": {
            "description": "Indicates encoding to use for decoding responses, by default <b>utf8</b> used, but in some cases, when you need to get data inside message you can use <b>base64</b> here"
          },
          "order": 35
        }
      }
    }
  }
}